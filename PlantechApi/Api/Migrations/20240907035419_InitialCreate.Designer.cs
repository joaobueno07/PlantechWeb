// <auto-generated />
using System;
using Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(PlantechContext))]
    [Migration("20240907035419_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Infra.Models.Cliente", b =>
                {
                    b.Property<int>("PkCliente")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_cliente");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<int>("FuncionariosProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_producao_pk_producao");

                    b.Property<string>("Contato")
                        .HasColumnType("TEXT")
                        .HasColumnName("contato");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("endereco");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("razao_social");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("PkCliente", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos", "FuncionariosProducaoPkProducao");

                    b.HasIndex(new[] { "RazaoSocial" }, "idx_cliente_razao_social");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Infra.Models.Fornecedor", b =>
                {
                    b.Property<string>("PkFornecedor")
                        .HasColumnType("TEXT")
                        .HasColumnName("pk_fornecedor");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cidade");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("endereco");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("razao_social");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("PkFornecedor");

                    b.HasIndex(new[] { "RazaoSocial" }, "idx_fornecedor_razao_social");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("Infra.Models.Funcionario", b =>
                {
                    b.Property<string>("PkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("pk_funcionario");

                    b.Property<int>("ProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("producao_pk_producao");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cargo");

                    b.Property<DateTime>("DataAdm")
                        .HasColumnType("DATE")
                        .HasColumnName("data_adm");

                    b.Property<DateTime>("DataDem")
                        .HasColumnType("DATE")
                        .HasColumnName("data_dem");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.HasKey("PkFuncionario", "ProducaoPkProducao");

                    b.HasIndex("ProducaoPkProducao");

                    b.HasIndex(new[] { "Nome" }, "idx_funcionarios_nome");

                    b.ToTable("funcionarios", (string)null);
                });

            modelBuilder.Entity("Infra.Models.ItemConsumo", b =>
                {
                    b.Property<int>("PkItem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_item");

                    b.Property<int>("ItensReceitaPkItens")
                        .HasColumnType("INTEGER")
                        .HasColumnName("itens_receita_pk_itens");

                    b.Property<int>("ProdutosPkProdutos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("produtos_pk_produtos");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL")
                        .HasColumnName("valor");

                    b.HasKey("PkItem", "ItensReceitaPkItens", "ProdutosPkProdutos");

                    b.HasIndex("ItensReceitaPkItens");

                    b.HasIndex("ProdutosPkProdutos");

                    b.ToTable("item_consumo", (string)null);
                });

            modelBuilder.Entity("Infra.Models.ItemProduzido", b =>
                {
                    b.Property<int>("PkItem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_item");

                    b.Property<int>("ProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("producao_pk_producao");

                    b.Property<int>("ProducaoItensReceitaPkItens")
                        .HasColumnType("INTEGER")
                        .HasColumnName("producao_itens_receita_pk_itens");

                    b.Property<int>("ProdutosPkProdutos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("produtos_pk_produtos");

                    b.Property<DateTime?>("DataValidade")
                        .HasColumnType("DATE")
                        .HasColumnName("data_validade");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL")
                        .HasColumnName("valor");

                    b.HasKey("PkItem", "ProducaoPkProducao", "ProducaoItensReceitaPkItens", "ProdutosPkProdutos");

                    b.HasIndex("ProdutosPkProdutos");

                    b.ToTable("item_produzido", (string)null);
                });

            modelBuilder.Entity("Infra.Models.ItensReceitum", b =>
                {
                    b.Property<int>("PkItens")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_itens");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.HasKey("PkItens");

                    b.ToTable("itens_receita", (string)null);
                });

            modelBuilder.Entity("Infra.Models.ItensVendum", b =>
                {
                    b.Property<int>("PkItem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_item");

                    b.Property<int>("ProdutosPkProdutos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("produtos_pk_produtos");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade");

                    b.Property<double>("ValorUnitario")
                        .HasColumnType("REAL")
                        .HasColumnName("valor_unitario");

                    b.HasKey("PkItem", "ProdutosPkProdutos");

                    b.HasIndex("ProdutosPkProdutos");

                    b.ToTable("itens_venda", (string)null);
                });

            modelBuilder.Entity("Infra.Models.MatrizFilial", b =>
                {
                    b.Property<string>("PkEmpresa")
                        .HasColumnType("TEXT")
                        .HasColumnName("pk_empresa");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cidade");

                    b.Property<DateTime>("DataIni")
                        .HasColumnType("DATE")
                        .HasColumnName("data_ini");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("estado");

                    b.Property<int?>("Numero")
                        .HasColumnType("INTEGER")
                        .HasColumnName("numero");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("razao_social");

                    b.HasKey("PkEmpresa");

                    b.ToTable("matriz_filial", (string)null);
                });

            modelBuilder.Entity("Infra.Models.OrdemCompra", b =>
                {
                    b.Property<int>("PkCompra")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_compra");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<string>("FornecedorPkFornecedor")
                        .HasColumnType("TEXT")
                        .HasColumnName("fornecedor_pk_fornecedor");

                    b.Property<string>("PagamentosContasPkPagamento")
                        .HasColumnType("TEXT")
                        .HasColumnName("pagamentos_contas_pk_pagamento");

                    b.Property<string>("PagamentosContasFuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("pagamentos_contas_funcionarios_pk_funcionario");

                    b.Property<int>("PagamentosContasFuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pagamentos_contas_funcionarios_cargos_pk_cargos");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("PkCompra", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos", "FornecedorPkFornecedor", "PagamentosContasPkPagamento", "PagamentosContasFuncionariosPkFuncionario", "PagamentosContasFuncionariosCargosPkCargos");

                    b.HasIndex("FornecedorPkFornecedor");

                    b.HasIndex("PagamentosContasPkPagamento", "PagamentosContasFuncionariosPkFuncionario", "PagamentosContasFuncionariosCargosPkCargos");

                    b.ToTable("ordem_compra", (string)null);
                });

            modelBuilder.Entity("Infra.Models.PagamentosConta", b =>
                {
                    b.Property<string>("PkPagamento")
                        .HasColumnType("TEXT")
                        .HasColumnName("pk_pagamento");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("DATE")
                        .HasColumnName("data_vencimento");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL")
                        .HasColumnName("valor");

                    b.HasKey("PkPagamento", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos");

                    b.ToTable("pagamentos_contas", (string)null);
                });

            modelBuilder.Entity("Infra.Models.Producao", b =>
                {
                    b.Property<int>("PkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_producao");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATE")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.HasKey("PkProducao");

                    b.ToTable("producao", (string)null);
                });

            modelBuilder.Entity("Infra.Models.Produto", b =>
                {
                    b.Property<int>("PkProdutos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_produtos");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<int>("InsumoConsumo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("insumo_consumo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.Property<double>("PrecoCompra")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_compra");

                    b.Property<double>("PrecoVenda")
                        .HasColumnType("REAL")
                        .HasColumnName("preco_venda");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantidade_estoque");

                    b.HasKey("PkProdutos");

                    b.HasIndex(new[] { "Nome" }, "idx_produtos_nome");

                    b.ToTable("produtos", (string)null);
                });

            modelBuilder.Entity("Infra.Models.RecebeConta", b =>
                {
                    b.Property<int>("PkConta")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_conta");

                    b.Property<int>("ClientePkCliente")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cliente_pk_cliente");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<int>("FuncionariosProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_producao_pk_producao");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("DATE")
                        .HasColumnName("data_vencimento");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL")
                        .HasColumnName("valor");

                    b.HasKey("PkConta", "ClientePkCliente", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos", "FuncionariosProducaoPkProducao");

                    b.ToTable("recebe_contas", (string)null);
                });

            modelBuilder.Entity("Infra.Models.RelatorioCompra", b =>
                {
                    b.Property<int>("PkRelatorio")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_relatorio");

                    b.Property<string>("FornecedorPkFornecedor")
                        .HasColumnType("TEXT")
                        .HasColumnName("fornecedor_pk_fornecedor");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<int>("FuncionariosProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_producao_pk_producao");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATE")
                        .HasColumnName("data");

                    b.Property<string>("ProdutosLista")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("produtos_lista");

                    b.Property<string>("QuantidadeProdutos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("quantidade_produtos");

                    b.Property<double>("TotalCompras")
                        .HasColumnType("REAL")
                        .HasColumnName("total_compras");

                    b.HasKey("PkRelatorio", "FornecedorPkFornecedor", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos", "FuncionariosProducaoPkProducao");

                    b.HasIndex("FornecedorPkFornecedor");

                    b.ToTable("relatorio_compra", (string)null);
                });

            modelBuilder.Entity("Infra.Models.RelatorioProducao", b =>
                {
                    b.Property<int>("PkRelatorio")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_relatorio");

                    b.Property<int>("ProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("producao_pk_producao");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("conteudo");

                    b.Property<DateTime>("DataRelatorio")
                        .HasColumnType("DATE")
                        .HasColumnName("data_relatorio");

                    b.HasKey("PkRelatorio", "ProducaoPkProducao");

                    b.HasIndex("ProducaoPkProducao");

                    b.ToTable("relatorio_producao", (string)null);
                });

            modelBuilder.Entity("Infra.Models.RelatorioVendum", b =>
                {
                    b.Property<int>("PkRelatorio")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk_relatorio");

                    b.Property<string>("FuncionariosPkFuncionario")
                        .HasColumnType("TEXT")
                        .HasColumnName("funcionarios_pk_funcionario");

                    b.Property<int>("FuncionariosCargosPkCargos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_cargos_pk_cargos");

                    b.Property<int>("FuncionariosProducaoPkProducao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("funcionarios_producao_pk_producao");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATE")
                        .HasColumnName("data");

                    b.Property<string>("ProdutosLista")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("produtos_lista");

                    b.Property<string>("QuantidadeProdutos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("quantidade_produtos");

                    b.Property<double>("TotalVendas")
                        .HasColumnType("REAL")
                        .HasColumnName("total_vendas");

                    b.HasKey("PkRelatorio", "FuncionariosPkFuncionario", "FuncionariosCargosPkCargos", "FuncionariosProducaoPkProducao");

                    b.ToTable("relatorio_venda", (string)null);
                });

            modelBuilder.Entity("Infra.Models.Funcionario", b =>
                {
                    b.HasOne("Infra.Models.Producao", "ProducaoPkProducaoNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("ProducaoPkProducao")
                        .IsRequired();

                    b.Navigation("ProducaoPkProducaoNavigation");
                });

            modelBuilder.Entity("Infra.Models.ItemConsumo", b =>
                {
                    b.HasOne("Infra.Models.ItensReceitum", "ItensReceitaPkItensNavigation")
                        .WithMany("ItemConsumos")
                        .HasForeignKey("ItensReceitaPkItens")
                        .IsRequired();

                    b.HasOne("Infra.Models.Produto", "ProdutosPkProdutosNavigation")
                        .WithMany("ItemConsumos")
                        .HasForeignKey("ProdutosPkProdutos")
                        .IsRequired();

                    b.Navigation("ItensReceitaPkItensNavigation");

                    b.Navigation("ProdutosPkProdutosNavigation");
                });

            modelBuilder.Entity("Infra.Models.ItemProduzido", b =>
                {
                    b.HasOne("Infra.Models.Produto", "ProdutosPkProdutosNavigation")
                        .WithMany("ItemProduzidos")
                        .HasForeignKey("ProdutosPkProdutos")
                        .IsRequired();

                    b.Navigation("ProdutosPkProdutosNavigation");
                });

            modelBuilder.Entity("Infra.Models.ItensVendum", b =>
                {
                    b.HasOne("Infra.Models.Produto", "ProdutosPkProdutosNavigation")
                        .WithMany("ItensVenda")
                        .HasForeignKey("ProdutosPkProdutos")
                        .IsRequired();

                    b.Navigation("ProdutosPkProdutosNavigation");
                });

            modelBuilder.Entity("Infra.Models.OrdemCompra", b =>
                {
                    b.HasOne("Infra.Models.Fornecedor", "FornecedorPkFornecedorNavigation")
                        .WithMany("OrdemCompras")
                        .HasForeignKey("FornecedorPkFornecedor")
                        .IsRequired();

                    b.HasOne("Infra.Models.PagamentosConta", "PagamentosConta")
                        .WithMany("OrdemCompras")
                        .HasForeignKey("PagamentosContasPkPagamento", "PagamentosContasFuncionariosPkFuncionario", "PagamentosContasFuncionariosCargosPkCargos")
                        .IsRequired();

                    b.Navigation("FornecedorPkFornecedorNavigation");

                    b.Navigation("PagamentosConta");
                });

            modelBuilder.Entity("Infra.Models.RelatorioCompra", b =>
                {
                    b.HasOne("Infra.Models.Fornecedor", "FornecedorPkFornecedorNavigation")
                        .WithMany("RelatorioCompras")
                        .HasForeignKey("FornecedorPkFornecedor")
                        .IsRequired();

                    b.Navigation("FornecedorPkFornecedorNavigation");
                });

            modelBuilder.Entity("Infra.Models.RelatorioProducao", b =>
                {
                    b.HasOne("Infra.Models.Producao", "ProducaoPkProducaoNavigation")
                        .WithMany("RelatorioProducaos")
                        .HasForeignKey("ProducaoPkProducao")
                        .IsRequired();

                    b.Navigation("ProducaoPkProducaoNavigation");
                });

            modelBuilder.Entity("Infra.Models.Fornecedor", b =>
                {
                    b.Navigation("OrdemCompras");

                    b.Navigation("RelatorioCompras");
                });

            modelBuilder.Entity("Infra.Models.ItensReceitum", b =>
                {
                    b.Navigation("ItemConsumos");
                });

            modelBuilder.Entity("Infra.Models.PagamentosConta", b =>
                {
                    b.Navigation("OrdemCompras");
                });

            modelBuilder.Entity("Infra.Models.Producao", b =>
                {
                    b.Navigation("Funcionarios");

                    b.Navigation("RelatorioProducaos");
                });

            modelBuilder.Entity("Infra.Models.Produto", b =>
                {
                    b.Navigation("ItemConsumos");

                    b.Navigation("ItemProduzidos");

                    b.Navigation("ItensVenda");
                });
#pragma warning restore 612, 618
        }
    }
}
